#! /usr/bin/env python

######################################################################################
# If you're using another resource along with Watchman Monitoring, it can be helpful
#	to have a link built to be displayed on the server that will lead you right to
#	your other service.
#
# This plugin sample will attempt to lay out a way snatch information from the client
#	to build a machine-specific URL.

# Standard imports
import os, sys
import plistlib

# Base URL to use
base_URL = 'http://www.myawesomeservice.com/machines.php?'

# Here, I'm just going to build a dictionary of stuff to ask for.
#
# The information we're looking for in this example will be in the top
#	level of a plist, so we can just specify the path to the plist, and
#	the key that we want, and what to identify it as in the URL.

url_info = {
	'/path/to/plist': {
		'plist_key1': 'url_key1',
		'plist_key2': 'url_key2'
	}
}

#############################################################################################
#### Do the Work

if __name__ == '__main__':

	# This is a list of stuff we've found.
	#	Later, we're going to .join() this list to the base_URL
	machine_info = []

	# We're just going to loop through each key (path), and attempt to extract
	#	the information we want and add it to our URL
	for f in url_info.keys():

		# If it doesn't exist, we certainly can't read it.
		if not os.path.exists(f):
			print('"%s" does not exist, skipping.' % f)
			continue

		# Sometimes, things happen, and it can't be read, so we should try
		try:
			f_data = plistlib.readPlist(f)

			# Now, snag the info we want, and notify of what's not there
			for item in url_info[f].keys():

				if item not in f_data.keys():
					print('Could not find %s in %s' % (
						item,
						f
					) )
					continue

				# This will add "url_key=data" to our list of info
				machine_info.append( '%s=%s' % ( url_info[f][item], f_data[item] ) )

		# If we couldn't read the plist, we should probably make a note of it
		except:
			print('Could not read plist information at "%s"' % f)

	# Now we join all our information with the '&' sign, print it out, and exit
	if ( len(machine_info) > 0 ):
		print('%s%s' % (
			base_URL,
			'&'.join(machine_info)
		) )

	sys.exit(0)
