#! /usr/bin/env python

######################################################################################
# Log scanning is one of the most common ways to check up on a program
# This sample plugin will lay out a basic method to check a log for reported errors
#	Please refer to the basic-python-sample for information on plugin requirements.
#
# You will need to specify some basic information, such as the path to the log and
#	and a list of bad words to look for inside the log.

# Standard imports
import os, sys
import plistlib

# We have a toolkit available for various functions, like checking settings and running
# external commands
sys.path.append('/Library/MonitoringClient/Utilities/Modules')
from PluginToolkit import *

# A list of bad words
#	This can be provided via plist (NOT the _settings.plist, it will not get updated),
#	but for simplicity we're just going to make a list here in the plugin.
# Note how this is defined as a dict, with the desired exit status if the text is found
bad_logs = {
	'/path/to/log/file': {
		'ERROR': 20
		'FATAL': 2
	}
}

# You will need a settings plist to keep track of where you left off in the log
settings_plist = '/Library/MonitoringClient/PluginSupport/log-scan-sample_settings.plist'

# It's usually a good idea to keep track of where you were in the log file,
# so that you don't end up having to re-read the entire thing every time
# the plugin runs.  So, we're just going to use that as a base setting
base_settings = {
	'Log_Length': 0
}
settings = check_settings( base_settings, settings_plist )

#############################################################################################
#### Do the Work

if __name__ == '__main__':
	# Initialize our output string and exit variable
	output = ''

	# We could have many logs to check, and competing exit statuses, so we'll
	# keep those in a list this time, starting with the default "Nothing
	# to see here" status
	elist = [ 25 ]

	# Simple log scanning is one of the things we provide in the
	# PluginToolkit imported aboveYou can use it by calling the
	# LogScanner() class and a few basic tasksRead the log
	scanner = LogScanner()

	# Set the path to the log file
	# You can do this multiple times in the same plugin to check multiple
	# files.  Setting the path will reset any information gathered when
	# using a previous path.
	# To demonstrate, that is why the bad_logs is designed like it is above
	for log_file in bad_logs.keys():

		# If the path doesn't exist, this will return a False
		if not scanner.set_path( log_file ):
			continue

		# Get the new size of the log file, and keep track of it
		settings['Log_Length'] = scanner.get_size( settings['Log_Length'] )
		plistlib.writePlist( settings, settings_plist )

		# Read the contents of the log starting from the previously recorded size
		scanner.read_log()

		# Now, look for each error we defined above
		# Provide both the text, and exit status desired to the function
		# It is designed so that the most serious exit status will be used (ie, an
		#  exit 2 will not get replaced by an exit 20)
		# This function will return a list of lines that contain the text provided
		bad_text = bad_logs[log_file]
		error_list = []
		for text in bad_text.keys():
			errors = scanner.scan_log( text, bad_text[text] )
			for error in errors: error_list.append( error )

		# If we didn't return any errors, then all's good!
		if ( len(error_list) == 0 ):
			output += "No errors found in %s.\n" % log_file

		# If we did, we can just pass the error messages through to our own output
		else:
			output += 'Errors found in %s:\n%\n\n' % ( log_file, '\n'.join(error_list) )

		# The class will have saved the most serious exit status, found, so
		# We'll add that to the list of statuses
		elist.append( scanner.e )

	# Print our output and exit!
	print(output)

	# Pick an exit status, in order of importance
	if ( 200 in elist ): sys.exit(200)
	elif ( 2 in elist ): sys.exit(2)
	elif ( 20 in elist ): sys.exit(20)
	elif ( 0 in elist): sys.exit(0)
	else: sys.exit(25)
